name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Analysis Pipeline Tests
  test-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
    
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: analysis/.venv
        key: ${{ runner.os }}-poetry-${{ hashFiles('analysis/poetry.lock') }}
        restore-keys: |
          ${{ runner.os }}-poetry-
    
    - name: Install dependencies
      working-directory: ./analysis
      run: poetry install --no-interaction --no-root
    
    - name: Run tests
      working-directory: ./analysis
      run: |
        poetry run pytest tests/ -v --cov=src --cov-report=html
    
    - name: Run linting
      working-directory: ./analysis
      run: |
        poetry run flake8 src/
        poetry run black --check src/
        poetry run isort --check-only src/
    
    - name: Type checking
      working-directory: ./analysis
      run: poetry run mypy src/

  # Microsite Build
  build-microsite:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: microsite/package-lock.json
    
    - name: Install dependencies
      working-directory: ./microsite
      run: npm ci
    
    - name: Run linting
      working-directory: ./microsite
      run: npm run lint
    
    - name: Type checking
      working-directory: ./microsite
      run: npm run type-check
    
    - name: Build microsite
      working-directory: ./microsite
      run: npm run build
      env:
        NODE_ENV: production
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: microsite-build
        path: microsite/out

  # Deploy to GitHub Pages (only on main branch)
  deploy:
    needs: [test-analysis, build-microsite]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    permissions:
      contents: read
      pages: write
      id-token: write
    
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: microsite-build
        path: ./out
    
    - name: Setup Pages
      uses: actions/configure-pages@v3
    
    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./out
    
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v2